<!doctype HTML>
<html lang="en">
<head>
<title>Showlog</title>
<meta charset="utf-8">
<link rel="icon" href="data:;base64,iVBORw0KGgo=">  <!--prevent favicon requests-->
<style>
  @-webkit-keyframes blinker {
  from {opacity: 1.0;}
  to {opacity: 0.0;}
}
.blink{
  color:red;
  text-decoration: blink;
  -webkit-animation-name: blinker;
  -webkit-animation-duration: 0.6s;
  -webkit-animation-iteration-count:infinite;
  -webkit-animation-timing-function:ease-in-out;
  -webkit-animation-direction: alternate;
}
html, body{
  margin:0 auto;
  text-align:center;
  width:1024px;
  font-variant: small-caps;
  font-size:20px;
  font-family: monospace;
}
a {
  color: black;
  text-decoration: none;
  margin: 0 10px;
}
h3{
  margin:10px;
}
.systemLink{
  padding: 3px 10px;
}
.systemLink:hover {
  background:grey;
}
p{
  margin:0;
}
#linkBar{
  background-color:aqua;
}
#dateBar {
  text-transform: uppercase;
}
#graphContainer{
}
#editorCanvas{
  width:800px;
  background-color:darkgreen;
  border:solid 1px black;
  display:inline-block;
  float:left;
}

#fileList{
  overflow-y:auto;
  height:400px;
  border:solid 1px black;
  width:220px;
}
.logFile:hover{
  cursor:pointer;
}
</style>
<script src="https://code.jquery.com/jquery-3.2.1.js"></script>
<body>
<div id="linkBar"><a class="systemLink" href="/">HOME</a></div>
<h1 id="dateBar">ESP8266-temp-server</h1>
<div id="graphContainer">
<canvas class="" id="editorCanvas" width="800px" height="400px"></canvas>
<div id="fileList"></div>
</div>
<div id="minMax"><p id="minimum">loading</p><p id="maximum">loading</p></div>
<script>
//const hostName = 'http://192.168.0.100'; //debug/develop
const hostName = '';
$( document ).ready( function() {
  editorCanvas.width = editorCanvas.width;
  if ( hostName ) $('#dateBar').html( '<p class="blink">'+hostName+'</p>');
  $.get( hostName + '/files', function( data )
  {
    var fileArray = data.split('\n');
    fileArray.sort();
    for ( f = 0; f < fileArray.length; f++ )
      if ( fileArray[f].endsWith( '.log' ) ) $('#fileList').append( '<div class="logFile">'+ fileArray[f].substring( 1, 11 ) + "</div>" );
    if ( !$('.logFile').length )
      $('#graphContainer').html( "NO LOGS FOUND" );
    else
    {
      $('.logFile').last().click();
    }
  });
});
$('#fileList').on('click','.logFile',function()
{
  var currentClicked = this;
  $('.logFile').css('background-color','white').css('color','black');
  $('#dateBar').html('LOADING '+$(this).text());
  $(currentClicked).css('color','grey').css('background-color','yellow');
  var url = hostName + "/" + $(this).text() + ".log";
  var timeVal=[];
  var tempVal=[];
  var maxGridTemp,minGridTemp,maxMeasurement,minMeasurement;
  $('#minimum, #maximum').html('&nbsp;');
  $('#minimum').text('LOADING '+$(this).text());
  $.get( url, function( data )
  {
    var measurements = data.split('\n');
    measurements.forEach( function( item, index )
    {
      if (item)
      {
        var temp = item.split(',');
        if ( temp[0] && temp[1] && temp[1].length < 8 )
        {
          var date = new Date( parseInt(temp[0]) * 1000 );
          var secondsToday = date.getHours() * 3600;
          secondsToday += date.getMinutes() * 60;
          secondsToday += date.getSeconds();
          timeVal.push(secondsToday);
          tempVal.push(parseFloat(temp[1]));
        }
      }
    });
    minMeasurement = Math.min.apply(null,tempVal)
    maxMeasurement = Math.max.apply(null,tempVal)
    $('#minimum').html("Minimum: "+minMeasurement+"&deg; -> ");
    $('#maximum').html("Maximum: "+maxMeasurement+"&deg; -> ");
    minGridTemp = Math.trunc(minMeasurement-1);
    maxGridTemp = Math.trunc(maxMeasurement+2);
    if(isNaN(minMeasurement)||isNaN(maxMeasurement))
    {
      const ctx = editorCanvas.getContext( "2d" );
      ctx.clearRect(0, 0, editorCanvas.width, editorCanvas.height);
      return;
    }
    drawBackground( minGridTemp, maxGridTemp);
    var ctx = editorCanvas.getContext( "2d" ); /* draw the actual values */
    ctx.strokeStyle = 'rgba( 255, 0, 0, 1)';
    ctx.setLineDash([]);
    ctx.beginPath();
    var minSet = false;
    var maxSet = false;
    timeVal.forEach( function( item, index )
    {
      var x = map( item, 0, 86400, 0, editorCanvas.width );
      var y = map( tempVal[index], minGridTemp, maxGridTemp, editorCanvas.height, 0 );
      if ( tempVal[index] == minMeasurement&&!minSet)
      {
        $('#minimum').html($('#minimum').html()+" "+new Date(1000*item).toISOString().substr(11, 8));
        minSet = true;
      }
      if ( tempVal[index] == maxMeasurement&&!maxSet)
      {
        $('#maximum').html($('#maximum').html()+" "+new Date(1000*item).toISOString().substr(11, 8));
        maxSet = true;
      }
      ctx.lineTo( x, y );
    });
    ctx.stroke();
    $('.logFile').css('color','black');
    $(currentClicked).css('background-color','yellow').css('color','black');
    $('#dateBar').html($(currentClicked).text());
  });
});
function drawBackground(minGridTemp,maxGridTemp )
{
  const opacity = 0.3;
  const lineDash = [ 2, 2 ];
  var ctx = editorCanvas.getContext( "2d" );
  ctx.clearRect(0, 0, editorCanvas.width, editorCanvas.height);
  ctx.beginPath();
  if ( true )
  {
    ctx.strokeStyle = 'rgba( 255, 165, 0, ' + opacity + ')';
    ctx.font = '15px serif';
    for ( hour = 1; hour < 24; hour++ )
    {
      var x = map( hour, 0, 24, 0, editorCanvas.width );
      ctx.moveTo( x, 0 );
      ctx.lineTo( x, editorCanvas.height );
      ctx.setLineDash([]);
      ctx.textBaseline="middle";
      ctx.textAlign="center";
      ctx.strokeText( hour + "h", x, 10 );
      ctx.strokeText( hour + "h", x, editorCanvas.height / 2 );
      ctx.strokeText( hour + "h", x, editorCanvas.height - 10 );
      ctx.setLineDash( lineDash );
    }
    ctx.stroke();
    ctx.beginPath();
    ctx.strokeStyle = 'rgba( 255,255,255, '+ opacity+ ')';
    for ( templine = minGridTemp; templine <= maxGridTemp; templine++ )
    {
      var y = map( templine, minGridTemp, maxGridTemp, editorCanvas.height, 0 );
      ctx.moveTo( 0, y );
      ctx.lineTo( editorCanvas.width, y );
      var tempstr = parseInt( map( y, 0, editorCanvas.height, maxGridTemp, minGridTemp ) );
      tempstr += "Â°";
      ctx.setLineDash([]);
      ctx.textBaseline="middle";
      ctx.textAlign="center";
      ctx.strokeText( tempstr, 20, y );
      ctx.strokeText( tempstr, editorCanvas.width / 2, y );
      ctx.strokeText( tempstr, editorCanvas.width - 20, y );
      ctx.setLineDash( lineDash) ;
    }
    ctx.stroke();
  }
}
function map( x,  in_min,  in_max,  out_min,  out_max )
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
</script>
</body>
</html>
